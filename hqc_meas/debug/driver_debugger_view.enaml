# -*- coding: utf-8 -*-

from enaml.widgets.api import (Window, Container, ObjectCombo, Label,
                               GroupBox, Notebook, Page, PushButton,
                               MultilineField, Field, ScrollArea)
from enaml.core.api import (Looper, Conditional)
from enaml.layout.api import grid, vbox, hbox, spacer
from enaml.stdlib.mapped_view import MappedView
from inspect import cleandoc, getdoc
from textwrap import fill

def f_c(str, length = 80):
    return fill(cleandoc(str), 80)

from ..instruments.forms import FORMS_MAP_VIEWS


def _method_call(model, meth, f_args, f_kwargs):
    """
    """
    try:
        args = eval('(' + f_args.text + ',)')
    except:
        model.errors += 'Failed to evaluate args'
        return

    try:
        aux = f_kwargs.text.replace('=', ':')
        kwargs = eval('{' + aux + '}')
    except:
        errors.text += 'Failed to evaluate kwargs'
        return

    call = model.attempt_call(meth.selected, args, kwargs)
    mess = ''

    if isinstance(call, Exception):
        mess = f_c('''Call to {} failed with error
                    {}.'''.format(meth.selected.__name__,
                                  call.message))
    else:
        mess = f_c('''Call to {} succeeded and
            returned {}.'''.format(meth.selected.__name__,
                                   call))
    model.errors += mess + '\n'


enamldef DriverDebuggerView(Window): main:

    attr model

    title = 'Driver debugger'

    Container:
        constraints << [vbox(
                            hbox(dr_lab, dr, spacer),
                            prof,
                            hbox(dr_start, conn_o, conn_c, conn_r, dr_reload),
                            *tuple(cond.items + [err, clear])
                            ),
                        dr_start.width == conn_o.width,
                        conn_o.width == conn_c.width,
                        conn_c.width == conn_r.width,
                        conn_r.width == dr_reload.width
                        ]

        Label: dr_lab:
            text = 'Driver'
        ObjectCombo: dr:
            enabled << not model.connected
            items << model.drivers.keys()
            selected = None
            selected ::
                model.driver = model.drivers[selected]
                clear.clicked()
        GroupBox: prof:
            enabled << not model.connected
            hug_height = 'strong'
            title = 'Instrument profile'
            Notebook:
                tabs_closable = False
                tabs_movable = False
                size_hint_mode = 'current'
                Page:
                    title = 'Predifined'
                    Container:
                        ObjectCombo:
                            items << model.profiles.keys()
                            items ::
                                selected = None
                            selected ::
                                model.profile = model.profiles.get(selected,
                                                                   None)
                Page:
                    title = 'Custom'
                    Container:
                        MappedView: form:
                            typemap = FORMS_MAP_VIEWS
                            model << main.model.custom_form
                        PushButton: form_val:
                            text = 'Validate form'
                            background << 'green' if\
                                            isinstance(main.model.profile,
                                                       dict) else 'red'
                            clicked ::
                                aux = main.model.custom_form
                                if aux.check():
                                    main.model.profile = aux.connection_dict()

        PushButton: dr_start:
            text = 'Start driver'
            enabled << not model.connected and model.driver_ready
            clicked ::
                model.start_driver()
        PushButton: conn_o:
            text = 'Open connection'
            enabled << bool(not model.connected and model.driver_ready
                            and model.driver_instance)
            clicked ::
                model.open_connection()
        PushButton: conn_c:
            text = 'Close connection'
            enabled << model.connected
            clicked ::
                model.close_connection()
        PushButton: conn_r:
            text = 'Reopen connection'
            enabled << model.connected
            clicked ::
                model.reopen_connection()
        PushButton: dr_reload:
            text = 'Reload driver'
            enabled << bool(model.driver and not model.connected)
            clicked ::
                model.reload_driver()

        Conditional: cond:
            condition << model.connected
            ScrollArea:
                Container:
                    constraints << [grid(*loop.items)] +\
                                   [line[1].width == line[3].width
                                   for line in loop.items] +\
                                   [line[2].width == 20
                                   for line in loop.items] +\
                                   [line[4].width == 20
                                   for line in loop.items]
                    padding = 2
                    Looper: loop:
                        iterable << model.driver_attributes +\
                                    model.driver_properties
                        Label:
                            text << loop_item
                        Field: getter:
                            read_only = True
                        PushButton:
                            text = '<'
                            clicked ::
                                aux = model.attempt_get(loop_item)
                                if isinstance(aux, Exception):
                                    getter.background = 'red'
                                    getter.tool_tip = aux.message
                                else:
                                    getter.background = 'white'
                                    if isinstance(aux, basestring):
                                        getter.text = '"' + aux + '"'
                                    else:
                                        getter.text = str(aux)
                        Field: setter:
                            submit_triggers = ['lost_focus', 'return_pressed',
                                               'auto_sync']
                            tool_tip = f_c('''Enter the value to send to
                                the driver as in a python interpreter''')
                            text ::
                                setter.background = 'white'
                        PushButton:
                            text = '>'
                            clicked ::
                                setter.background = 'turquoise'
                                aux = model.attempt_set(loop_item, setter.text)
                                if isinstance(aux, Exception):
                                    setter.background = 'red'
                                    setter.tool_tip = f_c('''The last
                                        attempt to set the driver value failed
                                        with the exception :
                                        {}'''.format(aux.message))
                                    print setter.tool_tip
                                else:
                                    setter.background = 'green'
                                    setter.tool_tip = f_c('''Enter the
                                        value to send to the driver as in a
                                        python interpreter''')
            Container:
                padding = 2
                constraints << [hbox(
                                    vbox(hbox(meth, doc),
                                         g_args,
                                         g_kwargs),
                                     vbox(spacer, call_button)),
                                    ]
                ObjectCombo: meth:
                    items << model.driver_methods
                    to_string = lambda x : x.__name__
                    selected ::
                        f_args.text = ''
                        f_kwargs.text = ''
                PushButton: doc:
                    text = 'Doc'
                    clicked ::
                        pass
                GroupBox: g_args:
                    title = 'Args'
                    Field: f_args:
                        tool_tip = f_c('''Enter the positional arguments
                            of the selected method''')
                GroupBox: g_kwargs:
                    title = 'Kwargs'
                    Field: f_kwargs:
                        tool_tip = f_c('''Enter the keyword arguments of
                            the selected method''')
                PushButton: call_button:
                    text = 'Call'
                    clicked ::
                        _method_call(model, meth, f_args, f_kwargs)

        MultilineField: err:
            text << model.errors
            read_only = True
        PushButton: clear:
            text = 'Clear'
            clicked ::
                model.errors = ''
