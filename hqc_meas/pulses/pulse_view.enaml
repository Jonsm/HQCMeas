# -*- coding: utf-8 -*-
# =============================================================================
# module : pulses/pulses_views.enaml
# author : Matthieu Dartiailh
# license : MIT license
# =============================================================================
"""
"""
from enaml.layout.api import hbox, vbox, spacer, align
from enaml.widgets.api import (Container, Label, GroupBox, CheckBox, Splitter,
                               SplitItem, FlowItem, FlowArea, ObjectCombo)
from enaml.core.api import Conditional, Include

from hqc_meas.utils.widgets.qt_line_completer import QtLineCompleter
from .entry_eval import EVALUATER_TOOLTIP


def default_add_displays(core, item):
    if item.kind == 'Analogical':
        add_displays = []
        if item.modulation.activated:
            add_displays.append(ModulationView(item=item,
                                               modulation=item.modulation))

        if item.shape:
            cmd = 'hqc_meas.pulses.shapes_request'
            shapes, _ = core.invoke_command(cmd,
                                            {'shapes': item.shape.shape_class,
                                             'use_class_name': True})
            shape = shapes[item.shape.shape_class]
            add_displays.append(shape[1](item==item, shape=item.shape))

        return add_displays

    else:
        return []


enamldef ModulationView(FlowItem):
    """ View for the modulation of an analogical pulse.

    """
    attr item
    attr modulation

    GroupBox:
        title = 'Modulation'
        padding = 0
        constraints << [hbox(*self.widgets()),
                        align('v_center', kind_lab, kind_val),
                        align('v_center', kind_lab, spl)]

        Label: kind_lab:
            text = 'Kind'
        ObjectCombo: kind_val:
            items = list(modulation.get_member('kind').items)
            selected := modulation.kind

        Splitter: spl:
            SplitItem:
                Container:
                    constraints << [hbox(freq_lab, freq_val, freq_un),
                                    align('v_center', freq_lab, freq_val)]
                    Label: freq_lab:
                        text = 'Frequency'
                    QtLineCompleter: freq_val:
                        hug_width = 'ignore'
                        text := modulation.frequency
                        entries_updater << item.parent.get_bindable_vars
                        tool_tip = EVALUATER_TOOLTIP
                    ObjectCombo: freq_un:
                        items = list(modulation.get_member('frequency_unit').items)
                        selected := modulation.frequency_unit
            SplitItem:
                Container:
                    constraints << [hbox(phase_lab, phase_val, phase_un),
                                    align('v_center', phase_lab, phase_val)]
                    Label: phase_lab:
                        text = 'Phase'
                    QtLineCompleter: phase_val:
                        hug_width = 'ignore'
                        text := modulation.phase
                        entries_updater << item.parent.get_bindable_vars
                        tool_tip = EVALUATER_TOOLTIP
                    ObjectCombo: phase_un:
                        items = list(modulation.get_member('phase_unit').items)
                        selected := modulation.phase_unit


enamldef PulseView(GroupBox): view:
    """ View for a pulse item.

    """
    attr item
    attr context = item.root.context
    attr core
    attr add_displays = default_add_displays(core, item)
    attr pulse_state = core.invoke_command('hqc_meas.state.get',
                                           {'state_id':
                                            'hqc_meas.states.pulses'})

    title << 'Pulse {}'.format(item.index)
    hug_height = 'strong'

    constraints << [vbox(
                        hbox(kind_lab, kind_val, ch_lab, ch_val, def_lab,
                             def_val, *analog.items+[spacer]),
                        defs,
                        *add.items)]

    Label: kind_lab:
        text = 'Kind'
    ObjectCombo: kind_val:
        items = list(item.get_member('kind').items)
        selected := item.kind

    Label: ch_lab:
        text = 'Channel'
    ObjectCombo: ch_val:
        items << getattr(context, 'logical_channels', [])\
            if item.kind == 'logical'\
            else getattr(context, 'analogical_channels', [])
        selected := item.channel

    Label: def_lab:
        text = 'Mode'
    ObjectCombo: def_val:
        items << list(item.get_member('def_mode').items)
        selected := item.def_mode

    Splitter: defs:
        SplitItem:
            Container:
                padding = 0
                Label:
                    text << item.def_mode.split('/')[0]
                QtLineCompleter:
                    hug_width = 'ignore'
                    text := item.def_1
                    entries_updater << item.parent.get_bindable_vars
                    tool_tip = EVALUATER_TOOLTIP
        SplitItem:
            Container:
                padding = 0
                Label:
                    text << item.def_mode.split('/')[1]
                QtLineCompleter:
                    hug_width = 'ignore'
                    text := item.def_2
                    entries_updater << item.parent.get_bindable_vars
                    tool_tip = EVALUATER_TOOLTIP

    Conditional: analog:
        condition << item.kind == 'Analogical'
        Label:
            text = 'Modulation'
        CheckBox:
            text = 'Active'
            checked := item.modulation.activated
            checked ::
                if change['value']:
                    a_d = view.add_displays[:]
                    mod = ModulationView(item=item, modulation=item.modulation)
                    a_d.insert(0, mod)
                    view.add_displays = a_d
                else:
                    a_d = view.add_displays[:]
                    a_d.pop(0)
                    view.add_displays = a_d

        Label:
            text = 'Shape'
        ObjectCombo:
            items << pulse_state.shapes
            # Assume ends in Shape
            selected << item.shape.shape_class[:-5] if item.shape else ''
            selected ::
                if change.get('oldvalue'):
                    a_d = view.add_displays[:]
                    a_d.pop()
                    view.add_displays = a_d
                if change['value']:
                    cmd = 'hqc_meas.pulses.shapes_request'
                    shapes, _ = core.invoke_command(cmd,
                                                    {'shapes':
                                                        [change['value']]})
                    shape = shapes[change['value']]
                    item.shape = shape[0]()
                    disp = view.add_displays[:]
                    disp.append(shape[1](item=item, shape=item.shape))
                    view.add_displays = disp

    Conditional: add:
        condition << item.kind == 'Analogical' and bool(add_displays)
        FlowArea:
            margins = 2
            vertical_spacing = 5
            Include:
                objects << add_displays
