# -*- coding: utf-8 -*-
# =============================================================================
# module : pulses/manager/manifest.enaml
# author : Matthieu Dartiailh
# license : MIT license
# =============================================================================
"""
"""
from enaml.workbench.api import PluginManifest, Extension, ExtensionPoint
from enaml.workbench.core.api import Command
from enaml.workbench.ui.api import ActionItem, MenuItem, ItemGroup

from hqc_meas.utils.preferences.api import Preferences
from hqc_meas.utils.state.api import State
from hqc_meas.utils.widgets.errors_display import ErrorsDisplay
from hqc_meas.utils.dependencies.api import BuildDependency
from hqc_meas.utils.configobj_ops import flatten_config

from .building import BuilderView

def manager_plugin_factory():
    """ Factory funcion for the instr manager plugin.

    """
    from .plugin import PulsesManagerPlugin
    return PulsesManagerPlugin()


# --- Command handlers --------------------------------------------------------
# TODO implement a true manager
#def show_manager(event):
#    """ Handler for the 'hqc_meas.instr_manager.show_manager' command
#
#    """
#    manager = event.workbench.get_plugin('hqc_meas.instr_manager')
#    from .manager_view import TaskManagerView
#    TaskManagerView(manager=manager).show()

def show_starting_errors(event):
    """ Handler for the 'hqc_meas.pulses_manager.show_errors' command.

    """
    manager = event.workbench.get_plugin('hqc_meas.pulses_manager')
    ui = event.workbench.get_plugin('enaml.workbench.ui')
    ErrorsDisplay(ui.window, title='Pulses manager start up errors',
                  errors=manager.report()).exec_()


def sequences_request(event):
    """ Handler for the 'hqc_meas.pulses_manager.sequences_request' command.

    """
    manager = event.workbench.get_plugin('hqc_meas.pulses_manager')
    return manager.sequences_request(**event.parameters)


def contexts_request(event):
    """ Handler for the 'hqc_meas.pulses_manager.contexts_request' command.

    """
    manager = event.workbench.get_plugin('hqc_meas.pulses_manager')
    return manager.contexts_request(**event.parameters)

def shapes_request(event):
    """ Handler for the 'hqc_meas.pulses_manager.shapes_request' command.

    """
    manager = event.workbench.get_plugin('hqc_meas.pulses_manager')
    return manager.shapes_request(**event.parameters)

#TODO rr
def save_task(event):
    """ Handler for the 'hqc_meas.task_manager.save_task' command.

    """
    manager = event.workbench.get_plugin('hqc_meas.task_manager')
    return manager.save_task(**event.parameters)


def build_sequence(event):
    """ Handler for the 'hqc_meas.pulses_manager.build_sequence' command.

    Parameters
    ----------
    mode : {'ui', template', 'file'}
        From what source should the sequence be built. If 'ui' a dialog will
        open asking the user to select a sequence, in template mode a similar
        dialog will open but display only templates, in file mode a file dialog
        will be opened and the user will have to choose a config file.

    Returns
    -------
    sequence : Sequence

    """
    manager = event.workbench.get_plugin('hqc_meas.pulses_manager')
    mode = event.parameters.get('mode', 'ui')
    parent_ui = event.parameters.get('parent_ui')
    if mode == 'path':
        pass
    elif mode == 'template':
        pass
    else:
        dial = BuilderView(parent_ui, manager=manager, root=root)
        dial.exec_()
        if dial.result:
            seq = dial.model.sequence_config.build_sequence()
            if seq:
                return seq
            else:
                ErrorsDisplay(errors=dial.model.sequence_config.errors).exec_()

def build_root(event):
    """ Handler for the 'hqc_meas.task_manager.build_root' command.

    """
    manager = event.workbench.get_plugin('hqc_meas.task_manager')
    return manager.build_root(**event.parameters)

# --- Descritpion -------------------------------------------------------------

SHOW_MANAGER_DESCRIPTION = \
""" Show the task manager window."""

SHOW_ERRORS_DESCRIPTION = \
""" Show the errors which happened on plugin startup."""

SEQUENCES_REQUEST_DESCRIPTION = \
""" Request the infos associated to a list of sequences. """

CONTEXTS_REQUEST_DESCRIPTION = \
""" Request the infos associated to a list of contexts. """

SHAPES_REQUEST_DESCRIPTION = \
""" Request the infos associated to a list of shapes. """

SAVE_TASK_DESCRIPTION = \
""" Save a task to a file or object. """

BUILD_SEQUENCE_DESCRIPTION = \
""" Build a sequnce. """

BUILD_ROOT_DESCRIPTION = \
""" Build a root task. """

MANAGER_STATE_DESCRIPTION = \
""" The tasks manager gives access to the known tasks and filters."""

def collect_pulses_dependecies(workbench, flat_walk):
    """ Collector function for the build-dependencies extensions.

    """
    # Here we use direct call to plugin methods as this is internal to the
    # plugin
    manager = workbench.get_plugin('hqc_meas.pulses_manager')

    # Collect items.
    s_res = manager.sequences_request(flat_walk['item_class'],
                                      use_class_names=True,
                                      views=False)
    # Collect contexts.
    c_res = manager.contexts_request(flat_walk['context_class'],
                                     use_class_names=True,
                                     views=False)
    # Collect shapes.
    sh_res = manager.shapes_request(flat_walk['shape_class'],
                                      use_class_names=True,
                                      views=False)

    # Collect the templates.
    tp_res = manager.sequences_request(flat_walk['template_id'])

    if s_res[1] or c_res[1] or sh_res[1] or tp_res[1]:
        mess = 'Missing sequences: {}, contexts: {}, shapes: {}, templates: {}'

        raise ValueError(mess.format(s_res[1], c_res[1], sh_res[1], tp_res[1]))

    # Bundle all dependencies under a single dict.
    dependencies = {}
    dependencies.update(s_res[0])
    dependencies['contexts'] = c_res[0]
    dependencies['shapes'] = sh_res[0]
    dependencies['templates'] = tp_res[0]

    # Collect template dependencies.
    for _, conf, _ in tp_res[0]:
        t_conf = flatten_config(conf)
        t_dep = collect_pulses_dependecies(workbench, t_conf)['pulses']
        depedencies['shapes'].update(t_dep.pop('shapes'))
        depedencies['context'].update(t_dep.pop('context'))
        depedencies['templates'].update(t_dep.pop('templates'))
        depedencies.update(t_dep)

    if dependencies:
        return {'pulses': dependencies}
    else:
        return {}

# --- Manifest ----------------------------------------------------------------

enamldef PulsesManagerManifest(PluginManifest):
    """
    """
    id = 'hqc_meas.pulses_manager'
    factory = manager_plugin_factory

    Extension:
        id = 'prefs'
        point = 'hqc_meas.preferences.pref_plugin'
        Preferences:
            saving_method = 'pref_from_members'
            loading_method = 'members_from_preferences'
            auto_save = []

    Extension:
        id = 'state'
        point = 'hqc_meas.state.states'
        State:
            id = 'hqc_meas.states.pulses_manager'
            description = MANAGER_STATE_DESCRIPTION
            sync_members = ['sequences', 'contexts', 'shapes']

    Extension:
        id = 'item_classes'
        point = 'hqc_meas.dependencies.build'
        BuildDependency:
            id = 'hqc_meas.pulses_manager.dependencies'
            walk_members = ['item_class', 'context_class',
                            'shape_class', 'template_id']
            collect = collect_pulses_dependecies

    Extension:
        id = 'commands'
        point = 'enaml.workbench.core.commands'
#        Command:
#            id = 'hqc_meas.instr_manager.show_manager'
#            description = SHOW_MANAGER_DESCRIPTION
#            handler = show_manager
        Command:
            id = 'hqc_meas.pulses_manager.show_starting_errors'
            description = SHOW_ERRORS_DESCRIPTION
            handler = show_starting_errors
        Command:
            id = 'hqc_meas.pulses_manager.sequences_request'
            description = SEQUENCES_REQUEST_DESCRIPTION
            handler = sequences_request
        Command:
            id = 'hqc_meas.pulses_manager.contexts_request'
            description = CONTEXTS_REQUEST_DESCRIPTION
            handler = contexts_request
        Command:
            id = 'hqc_meas.pulses_manager.shapes_request'
            description = SHAPES_REQUEST_DESCRIPTION
            handler = shapes_request
#        Command:
#            id = 'hqc_meas.task_manager.save_task'
#            description = SAVE_TASK_DESCRIPTION
#            handler = save_task
        Command:
            id = 'hqc_meas.pulses_manager.build_sequence'
            description = BUILD_SEQUENCE_DESCRIPTION
            handler = build_sequence
#        Command:
#            id = 'hqc_meas.task_manager.build_root'
#            description = BUILD_ROOT_DESCRIPTION
#            handler = build_root

    Extension:
        id = 'menu'
        point = 'enaml.workbench.ui.actions'
        MenuItem:
            path = '/tools/pulses'
            label = 'Pulses'
            after = 'tasks'
            ItemGroup:
                id = 'user'
#        ActionItem:
#            path = '/tasks/show_manager'
#            label = 'Manager'
#            command = 'hqc_meas.task_manager.show_manager'
        ActionItem:
            path = 'tools/pulses/show_errors'
            label = 'Start up errors'
            command = 'hqc_meas.pulses_manager.show_starting_errors'
