# -*- coding: utf-8 -*-
#==============================================================================
# module : manager_manifest.py
# author : Matthieu Dartiailh
# license : MIT license
#==============================================================================
"""
"""
from enaml.workbench.api import PluginManifest, Extension, ExtensionPoint
from enaml.workbench.core.api import Command
from enaml.workbench.ui.api import ActionItem, MenuItem, ItemGroup

from ..utils.pref_plugin import Preferences
from ..utils.state_plugin import State
from hqc_meas.utils.widgets.errors_display import ErrorsDisplay

def manager_plugin_factory():
    """ Factory funcion for the instr manager plugin.

    """
    from .manager_plugin import TaskManagerPlugin
    return TaskManagerPlugin()

# TODO implement a true manager
#def show_manager(event):
#    """ Handler for the 'hqc_meas.instr_manager.show_manager' command
#
#    """
#    manager = event.workbench.get_plugin('hqc_meas.instr_manager')
#    from .manager_view import TaskManagerView
#    TaskManagerView(manager=manager).show()

def show_starting_errors(event):
    """ Handler for the 'hqc_meas.task_manager.show_errors' command.

    """
    manager = event.workbench.get_plugin('hqc_meas.task_manager')
    ui = event.workbench.get_plugin('enaml.workbench.ui')
    ErrorsDisplay(ui.window, title='Task manager start up errors',
                  errors=manager.report()).exec_()


def tasks_request(event):
    """ Handler for the 'hqc_meas.task_manager.taskss_request' command.

    """
    manager = event.workbench.get_plugin('hqc_meas.task_manager')
    return manager.tasks_request(**event.parameters)


def views_request(event):
    """ Handler for the 'hqc_meas.task_manager.views_request' command.

    """
    manager = event.workbench.get_plugin('hqc_meas.task_manager')
    return manager.views_request(**event.parameters)


def filter_tasks(event):
    """ Handler for the 'hqc_meas.task_manager.filter_tasks' command.

    """
    manager = event.workbench.get_plugin('hqc_meas.task_manager')
    return manager.filter_tasks(**event.parameters)


def config_request(event):
    """ Handler for the 'hqc_meas.task_manager.config_request' command.

    """
    manager = event.workbench.get_plugin('hqc_meas.task_manager')
    return manager.config_request(**event.parameters)


def save_task(event):
    """ Handler for the 'hqc_meas.task_manager.save_task' command.

    """
    manager = event.workbench.get_plugin('hqc_meas.task_manager')
    return manager.save_task(**event.parameters)


def build_task(event):
    """ Handler for the 'hqc_meas.task_manager.build_task' command.

    """
    manager = event.workbench.get_plugin('hqc_meas.task_manager')
    return manager.build_task(**event.parameters)


def build_root(event):
    """ Handler for the 'hqc_meas.task_manager.build_root' command.

    """
    manager = event.workbench.get_plugin('hqc_meas.task_manager')
    return manager.build_root(**event.parameters)


INSTR_USERS_DESCRIPTION = \
""" Extensions to this point can be used to provide the id of a plugin
which will use instruments. Plugins which do not provides an extension to this
point won't be allowed to use the command defined by the manager.Additionally
the default policy concerning the release of instrument can be provided, as
well as the name of the method to call when the manager need to get an
instrument back."""

SHOW_MANAGER_DESCRIPTION = \
""" Show the task manager window."""

SHOW_ERRORS_DESCRIPTION = \
""" Show the errors which happened on plugin startup."""

TASK_REQUEST_DESCRIPTION = \
""" Request the infos associated to a list of tasks. """

VIEW_REQUEST_DESCRIPTION = \
""" Request the views associated to a list of tasks. """

FILTER_TASKS_DESCRIPTION = \
""" Filter tasks using the provided filter (filter). """

CONFIG_REQUEST_DESCRIPTION = \
""" Request the appropriate config for a task (task) """

SAVE_TASK_DESCRIPTION = \
""" Save a task to a file or object. """

BUILD_TASK_DESCRIPTION = \
""" Build a task to insert in a task hierarchy. """

BUILD_ROOT_DESCRIPTION = \
""" Build a root task. """

MANAGER_STATE_DESCRIPTION = \
""" The tasks manager gives access to the known tasks and filters."""


enamldef TaskManagerManifest(PluginManifest):
    """
    """
    id = 'hqc_meas.task_manager'
    factory = manager_plugin_factory
    Extension:
        id = 'prefs'
        point = 'hqc_meas.preferences.pref_plugin'
        Preferences:
            saving_method = 'pref_from_members'
            loading_method = 'members_from_preferences'
            auto_save = []
    Extension:
        id = 'state'
        point = 'hqc_meas.state.states'
        State:
            id = 'hqc_meas.states.task_manager'
            description = MANAGER_STATE_DESCRIPTION
            sync_members = ['tasks', 'filters']
    Extension:
        id = 'commands'
        point = 'enaml.workbench.core.commands'
#        Command:
#            id = 'hqc_meas.instr_manager.show_manager'
#            description = SHOW_MANAGER_DESCRIPTION
#            handler = show_manager
        Command:
            id = 'hqc_meas.task_manager.show_starting_errors'
            description = SHOW_ERRORS_DESCRIPTION
            handler = show_starting_errors
        Command:
            id = 'hqc_meas.task_manager.tasks_request'
            description = TASK_REQUEST_DESCRIPTION
            handler = tasks_request
        Command:
            id = 'hqc_meas.task_manager.views_request'
            description = VIEW_REQUEST_DESCRIPTION
            handler = views_request
        Command:
            id = 'hqc_meas.task_manager.filter_tasks'
            description = FILTER_TASKS_DESCRIPTION
            handler = filter_tasks
        Command:
            id = 'hqc_meas.task_manager.config_request'
            description = CONFIG_REQUEST_DESCRIPTION
            handler = config_request
        Command:
            id = 'hqc_meas.task_manager.save_task'
            description = SAVE_TASK_DESCRIPTION
            handler = save_task
        Command:
            id = 'hqc_meas.task_manager.build_task'
            description = BUILD_TASK_DESCRIPTION
            handler = build_task
        Command:
            id = 'hqc_meas.task_manager.build_root'
            description = BUILD_ROOT_DESCRIPTION
            handler = build_root
    Extension:
        id = 'menu'
        point = 'enaml.workbench.ui.actions'
        MenuItem:
            path = '/tools/tasks'
            label = 'Tasks'
            after = 'instr'
            ItemGroup:
                id = 'user'
#        ActionItem:
#            path = '/tasks/show_manager'
#            label = 'Manager'
#            command = 'hqc_meas.task_manager.show_manager'
        ActionItem:
            path = 'tools/tasks/show_manager'
            label = 'Start up errors'
            command = 'hqc_meas.task_manager.show_starting_errors'
