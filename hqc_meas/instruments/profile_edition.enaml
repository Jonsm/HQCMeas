# -*- coding: utf-8 -*-
"""
Created on Sun Nov 03 18:18:39 2013

@author: hqc
"""

from atom.api import Enum, set_default
from enaml.widgets.api import (Dialog, Container, PushButton, Form,
                               ObjectCombo, Label, Field)
from enaml.stdlib.mapped_view import MappedView
from enaml.layout.api import vertical, horizontal, hbox, spacer, align, vbox
from enaml.core.api import Conditional

from .forms import FORMS_MAP_VIEWS


enamldef ProfileView(Form): instr_form_view:
    """
    """
    attr form
    attr mode = Enum('static', 'new', 'edit')

    Label:
        text = 'Name'
    Field:
        text := model.name
        read_only = bool(mode != 'new')

    Label:
        text = 'Driver type'
    Conditional:
        condition = bool(mode == 'static')
        Field:
            text << model.driver_type
            read_only = True
    Conditional:
        condition = bool(mode != 'static')
        ObjectCombo:
            items << model.manager.driver_types
            selected := model.driver_type

    Label:
        text = 'Driver'
    Conditional:
        condition = bool(mode == 'static')
        Field:
            text << model.driver
            read_only = True
    Conditional:
        condition = bool(mode != 'static')
        ObjectCombo:
            items << model.drivers
            selected := model.driver

    MappedView:
        model << form.connection_form
        typemap = FORMS_MAP_VIEWS
        kwargs = {'mode': mode}


def _handle_close(self, view, is_ok):
    """

    Before closing an InstrFormDialog ensures that the informations provided
    allow to open the connection to the specified instrument.
    """
    model = view.model
    manager = model.manager
    connection_form = model.connection_form
    if is_ok:
        if (model.name != '' and model.driver_type and model.driver != ''
                and connection_form.check()):
            connection_dict = connection_form.connection_dict()
            try:
                driver = manager.request_driver([model.driver])[0]
                instr = driver(connection_dict)
                instr.close_connection()
            except InstrIOError:
                message = cleandoc(u"""The software failed to
                            establish the connection with the instrument
                            please check all parameters and instrument
                            state and try again""")

                critical(parent=view,
                         text=fill(message, 80),
                         title='Connection failure')
                return False

            return True

        else:
            fields = connection_form.required_fields()
            message = cleandoc(u"""You must fill the fields : name,
                               driver type, driver, {} before
                               validating""".format(fields))

            information(parent=view, text=fill(message, 80),
                        title='Missing information')

    else:
        return False


# TODO allow to choose the folder if different ones exist
enamldef ProfileDialog(Dialog): instr_dialog:
    """
    """
    attr model
    attr mode = Enum('new', 'edit')
    title = 'Instrument form'

    Container:
        hug_width = 'medium'
        hug_height = 'strong'
        constraints = [
            vbox(form, hbox(cancel, ok)),
            align('midline', form),
            ]
        ProfileView: form:
            hug_width = 'weak'
            hug_height = 'medium'
            mode = instr_dialog.mode
            form << instr_dialog.model
        PushButton: cancel:
            text = 'Cancel'
            hug_width = 'strong'
            clicked ::
                if handler.close(instr_dialog, False):
                    instr_dialog.reject()
        PushButton: ok:
            text = 'Ok'
            hug_width = 'strong'
            clicked ::
                if handler.close(instr_dialog, True):
                    instr_dialog.accept()