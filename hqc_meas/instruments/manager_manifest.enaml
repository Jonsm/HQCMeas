# -*- coding: utf-8 -*-
#==============================================================================
# module : manager_manifest.py
# author : Matthieu Dartiailh
# license : MIT license
#==============================================================================
"""
"""
import enaml
from enaml.workbench.api import PluginManifest, Extension, ExtensionPoint
from enaml.workbench.core.api import Command
from enaml.workbench.ui.api import ActionItem, MenuItem, ItemGroup

from ..utils.pref_plugin import Preferences
from ..utils.state_plugin import State


def manager_plugin_factory():
    """ Factory funcion for the instr manager plugin.

    """
    from .manager_plugin import InstrManagerPlugin
    return InstrManagerPlugin()


def show_manager(event):
    """ Handler for the 'hqc_meas.instr_manager.show_manager' command

    """
    manager = event.workbench.get_plugin('hqc_meas.instr_manager')
    with enaml.imports():
        from .manager_view import InstrManagerView
    InstrManagerView(manager=manager).show()


def matching_drivers(event):
    """ Handler for the 'hqc_meas.instr_manager.matching_profiles' command

    """
    manager = event.workbench.get_plugin('hqc_meas.instr_manager')
    return manager.matching_drivers(**event.parameters)


def matching_profiles(event):
    """ Handler for the 'hqc_meas.instr_manager.matching_profiles' command

    """
    manager = event.workbench.get_plugin('hqc_meas.instr_manager')
    return manager.matching_profiles(**event.parameters)


def driver_types_request(event):
    """ Handler for the 'hqc_meas.instr_manager.driver_types_request' command
    """
    manager = event.workbench.get_plugin('hqc_meas.instr_manager')
    return manager.driver_types_request(**event.parameters)


def drivers_request(event):
    """ Handler for the 'hqc_meas.instr_manager.drivers_request' command
    """
    manager = event.workbench.get_plugin('hqc_meas.instr_manager')
    return manager.drivers_request(**event.parameters)


def profiles_request(event):
    """ Handler for the 'hqc_meas.instr_manager.profiles_request' command
    """
    manager = event.workbench.get_plugin('hqc_meas.instr_manager')
    plugin_id = event.trigger.manifest.id
    return manager.profiles_request(plugin_id, **event.parameters)


def profiles_released(event):
    """ Handler for the 'hqc_meas.instr_manager.profiles_released' command
    """
    manager = event.workbench.get_plugin('hqc_meas.instr_manager')
    plugin_id = event.trigger.manifest.id
    return manager.profiles_released(plugin_id, **event.parameters)


INSTR_USERS_DESCRIPTION = \
""" Extensions to this point can be used to provide the id of a plugin
which will use instruments. Plugins which do not provides an extension to this
point won't be allowed to use the command defined by the manager.Additionally
the default policy concerning the release of instrument can be provided, as
well as the name of the method to call when the manager need to get an
instrument back."""

SHOW_MANAGER_DESCRIPTION = \
""" Show the instrument manager window."""

MATCHING_DRIVERS_DESCRIPTION = \
""" Return a list of drivers whose types matches one in the provided list. """

MATCHING_PROFILES_DESCRIPTION = \
""" Return a list of profiles whose driver is in the provided list
(kw = drivers)"""

DRIVER_TYPES_REQUEST_DESCRIPTION = \
""" Request the classes associated to a list of driver types. """

DRIVERS_REQUEST_DESCRIPTION = \
""" Request the classes associated to a list of drivers. """

PROFILES_REQUEST_DESCRIPTION = \
""" Request the privilege to use the specified profiles. No profile should be
used without first asking for this privilege, if necessary and possible,
currently used profiles will be released. """

PROFILES_RELEASED_DESCRIPTION = \
""" Inform the manager that the specified profiles are no longer in use by the
caller. """

MANAGER_STATE_DESCRIPTION = \
""" The instrument manager gives access to the known drivers ('drivers'),
profiles ('all_profiles') defined for the current session, and to the
currently available profiles ('available_profiles'). """


enamldef InstrManagerManifest(PluginManifest):
    """
    """
    id = 'hqc_meas.instr_manager'
    factory = manager_plugin_factory
    ExtensionPoint:
        id = 'users'
        description = INSTR_USERS_DESCRIPTION
    Extension:
        id = 'prefs'
        point = 'hqc_meas.preferences.pref_plugin'
        Preferences:
            saving_method = 'pref_from_members'
            loading_method = 'members_from_preferences'
            auto_save = []
    Extension:
        id = 'state'
        point = 'hqc_meas.state.states'
        State:
            id = 'hqc_meas.states.instr_manager'
            description = MANAGER_STATE_DESCRIPTION
            sync_members = ['driver_types', 'drivers', 'all_profiles',
                            'available_profiles']
    Extension:
        id = 'commands'
        point = 'enaml.workbench.core.commands'
        Command:
            id = 'hqc_meas.instr_manager.show_manager'
            description = SHOW_MANAGER_DESCRIPTION
            handler = show_manager
        Command:
            id = 'hqc_meas.instr_manager.matching_drivers'
            description = MATCHING_DRIVERS_DESCRIPTION
            handler = matching_drivers
        Command:
            id = 'hqc_meas.instr_manager.matching_profiles'
            description = MATCHING_PROFILES_DECRIPTION
            handler = matching_profiles
        Command:
            id = 'hqc_meas.instr_manager.driver_types_request'
            description = DRIVER_TYPES_REQUEST_DESCRIPTION
            handler = driver_types_request
        Command:
            id = 'hqc_meas.instr_manager.drivers_request'
            description = DRIVERS_REQUEST_DESCRIPTION
            handler = drivers_request
        Command:
            id = 'hqc_meas.instr_manager.profiles_request'
            description = PROFILES_REQUEST_DESCRIPTION
            handler = profiles_request
        Command:
            id = 'hqc_meas.instr_manager.profiles_released'
            description = PROFILES_RELEASED_DESCRIPTION
            handler = profiles_released
    Extension:
        id = 'menu'
        point = 'enaml.workbench.ui.actions'
        MenuItem:
            path = 'tools/instr'
            label = 'Instr'
            ItemGroup:
                id = 'user'
        ActionItem:
            path = 'tools/instr/show_manager'
            label = 'Manager'
            command = 'hqc_meas.instr_manager.show_manager'
