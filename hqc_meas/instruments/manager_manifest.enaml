# -*- coding: utf-8 -*-
#==============================================================================
# module : manager_manifest.py
# author : Matthieu Dartiailh
# license : MIT license
#==============================================================================
"""
"""
from enaml.workbench.api import PluginManifest, Extension, ExtensionPoint
from enaml.workbench.core.api import Command
from enaml.workbench.ui.api import ActionItem, MenuItem, ItemGroup

from .manager_view import InstrManagerView


def manager_plugin_factory():
    """ Factory funcion for the instr manager plugin.
    """
    from .manager_plugin import ManagerPlugin
    return ManagerPlugin()


def show_manager(event):
    """ Handler for the 'hqc_meas.instr_manager.show_manager' command
    """
    manager = event.workbench.get_plugin('hqc_meas.instr_manager')
    InstrManagerView(manager=manager).show()

def list_drivers(event):
    """Hanler for the 'hqc_meas.instr_manager.list_driver' command
    """
    manager = event.workbench.get_plugin('hqc_meas.instr_manager')
    return manager.drivers

def list_profiles(event):
    """Handler for the 'hqc_meas.instr_manager.list_profiles"""
    manager = event.workbench.get_plugin('hqc_meas.instr_manager')
    return manager.profiles

INSTR_USERS_DESCRIPTION = \
""" Extensions to this point can be used to provide the id of a plugin
which will use instruments. Plugins which do not provides an extension to this
point won't be allowed to use the command defined by the manager.Additionally
the default policy concerning the release of instrument can be provided, as
well as the name of the method to call when the manager need to get an
instrument back."""

SHOW_MANAGER_DESCRIPTION = \
""" Show the instrument manager window."""

LIST_DRIVERS_DESCRIPTON = \
""" Return a list of all drivers"""

LIST_PROFILES_DESCRIPTION = \
""" Return a list of all profiles"""

enamldef InstrManagerManifest(PluginManifest):
    """
    """
    id = 'hqc_meas.instr_manager'
    factory = manager_plugin_factory
    ExtensionPoint:
        id = 'users'
        description = INSTR_USERS_DESCRIPTION
    Extension:
        id = 'commands'
        point = 'enaml.workbench.core.commands'
        Command:
            id = 'hqc_meas.instr_manager.show_manager'
            description = SHOW_MANAGER_DESCRIPTION
            handler = show_manager
        Command:
            id = 'hqc_meas.instr_manager.list_drivers'
            description = LIST_DRIVERS_DESCRIPTON
            handler = list_drivers
        Command:
            id = 'hqc_meas.instr_manager.list_profiles'
            description = LIST_PROFILES_DECRIPTION
            handler = list_profiles
        Command:
            id = 'hqc_meas.instr_manager.drivers_released'
            description = DRIVERS_RELEASED_DESCRIPTION
            handler = drivers_released
        Command:
            id = 'hqc_meas.instr_manager.drivers_request'
            description = DRIVERS_REQUEST_DESCRIPTION
            handler = drivers_request
    Extension:
        id = 'menu'
        point = 'enaml.workbench.ui.actions'
        MenuItem:
            path = '/instr'
            label = 'Instr'
            ItemGroup:
                id = 'user'
        ActionItem:
            path = '/instr/show_manager'
            label = 'Manager'
            command = 'hqc_meas.instr_manager.show_manager'
