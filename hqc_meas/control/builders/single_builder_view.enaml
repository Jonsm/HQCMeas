from enaml.widgets.api import (Dialog, Container, ObjectCombo, Label, CheckBox,
                            PushButton, Form)
from enaml.core.api import Conditional
from enaml.layout.api import hbox, vbox, grid, spacer
from enaml.stdlib.mapped_view import MappedView
from inspect import cleandoc

from .pref_view import PREF_VIEW_MAP

enamldef SingleBuilderView(Dialog): dial:
    """
    """
    attr model
    Container:
        constraints << [vbox(hbox(form, *pref.items), hbox(spacer, cancel, ok))]
        Form: form:
            Label:
                text = 'Select driver'
            ObjectCombo: 
                items << model.driver_map.keys()
                items ::
                    selected = None
                selected ::
                    model.driver_type = model.driver_map[selected]
            Label:
                text = 'Select profile'
            ObjectCombo:
                items << model.profile_map.keys()
                items ::
                    selected = None
                selected ::
                    model.profile = model.profile_map[selected]
            Label:
                text = 'Select main ui'
            ObjectCombo:
                items << model.available_uis['main']
                items ::
                    selected = None
                to_string = lambda x : x.__name__
                selected >> model.main_ui
            Label:
                text = 'Select auxiliary ui'
            ObjectCombo:
                items << model.available_uis['aux']
                items ::
                    selected = None
                to_string = lambda x : x.__name__
                selected >> model.second_ui
            Label:
                text = 'Use custom property ui'
            CheckBox:
                enabled << bool(len(model.available_uis['pref']) > 1)
                tooltip = cleandoc('''By default, the ui provided as auxiliary is
                        used for the property ui too''')
            Conditional:
                condition << prop.checked
                Label:
                    text = 'Select a property ui'
                ObjectCombo:
                    items << model.available_uis['prop']
                    items ::
                        selected = None
                    to_string = lambda x : x.__name__
                    selected >> model.prop_ui
        MappedView: pref:
            typemap = PREF_VIEW_MAP
            model << dial.model.pref_model
        PushButton: cancel:
            text = 'Cancel'
            clicked ::
                dial.reject()
        PushButton: ok:
            text = 'Ok'
            clicked ::
                model.build_panel()
                dial.accept()