# -*- coding: utf-8 -*-
#==============================================================================
# module : manager_manifest.py
# author : Matthieu Dartiailh
# license : MIT license
#==============================================================================
"""
"""
from enaml.workbench.api import PluginManifest, Extension, ExtensionPoint
from enaml.workbench.core.api import Command
from enaml.workbench.ui.api import ActionItem, MenuItem, ItemGroup
from enaml.widgets.api import FileDialogEx

from .manager_view import InstrManagerView


def preference_plugin_factory():
    """ Factory function for the PrefPlugin

    """
    from .pref_plugin import PrefPlugin
    return PrefPlugin()


def save_preferences(event):
    """ Handler for the 'hqc_meas.preferences.save' command

    """
    pref = event.workbench.get_plugin('hqc_meas.preferences')
    if 'ask_user' in event.parameters:
        path = FileDialogEx.get_save_file_name(name_filters=['*.ini'])
        if path:
            pref.save_preferences(path=path)
    elif 'path' in event.parameters:
        pref.save_preferences(path=event.parameters['path'])
    else:
        pref.save_preferences()


def load_preferences(event):
    """ Handler for the 'hqc_meas.preferences.load' command

    """
    pref = event.workbench.get_plugin('hqc_meas.preferences')
    if 'ask_user' in event.parameters:
        ini_path = event.parameters.get('path')
        path = FileDialogEx.get_open_file_name(current_path=ini_path,
                                               name_filters=['*.ini'])
        if path:
            pref.load_preferences(path=path)
    elif 'path' in event.parameters:
        pref.load_preferences(path=event.parameters['path'])
    else:
        pref.load_preferences()


def plugin_init_complete(event):
    """
    """
    #needed to avoid overwriting loaded prefs for sync members


def get_plugin_preferences(event):
    """ Handler for the 'hqc_meas.preferences.get_plugin_pref' command

    """
    pref = event.workbench.get_plugin('hqc_meas.preferences')
    return pref.plugin_preferences(event.parameters['plugin_id'])


def update_plugin_preferences(event):
    """ Handler for the 'hqc_meas.preferences.update_plugin_pref' command

    """
    pref = event.workbench.get_plugin('hqc_meas.preferences')
    pref.update_plugin_preferences(event.parameters['prefs'])


PREF_PLUGINS_DESCRIPTION = \
"""Plugins which uses the built in preferences system should provide an
extension to this point in the form of a Preferences object so that they are
hooked up in the automatic saving of preferences."""

SAVE_PREFERENCES_DESCRIPTION = \
""" This command will save the current preferences. If a 'ask_user' keyword is
provided it will ask the user to give the path to which the preferences should
be saved. If a 'path' keyword is provided the preferencs will be saved to the
file towards which the path points. If both keywords are provided the 'path'
will be used as a starting point for the file dialog. In the absence of
keywords preferences will be saved to the default location."""

LOAD_PREFERENCES_DESCRIPTION = \
""" This command will load the preferences. If a 'ask_user' keyword is
provided it will ask the user to give the path of the file in which the
preferences are stored. If a 'path' keyword is provided the preferencs will be
loaded from the file towards which the path points. If both keywords are
provided the 'path' will be used as a starting point for the file dialog.
In the absence of keywords preferences will be loaded from the default
location."""

GET_PLUGIN_PREF_DESCRIPTION = \
""" Return the preferences stored for a given plugin as a dict composed only
of strings."""


enamldef PreferencesManifest(PluginManifest):
    """
    """
    attr default_folder: str

    id = 'hqc_meas.preferences'
    factory = preference_plugin_factory

    ExtensionPoint:
        id = 'pref_plugins'
        description = PREF_PLUGINS_DESCRIPTION
    Extension:
        id = 'commands'
        point = 'enaml.workbench.core.commands'
        Command:
            id = 'hqc_meas.preferences.save'
            description = SAVE_PREF_DESCRIPTION
            handler = save_preferences
        Command:
            id = 'hqc_meas.preferences.load'
            description = LOAD_PREF_DESCRIPTION
            handler = load_preferences
        Command:
            id = 'hqc_meas.preferences.get_plugin_pref'
            description = GET_PLUGIN_PREF_DESCRIPTION
            handler = get_plugin_preferences
