# -*- coding: utf-8 -*-
#==============================================================================
# module : edition_view.enaml
# author : Matthieu Dartiailh
# license : MIT license
#==============================================================================
from atom.api import Typed, ContainerList, Instance
from enaml.stdlib.mapped_view import MappedView
from enaml.layout.api import hbox, spacer, vbox, align
from enaml.widgets.api import (PushButton, Menu, Action, Container, Dialog,
                               Label, Field, CheckBox, GroupBox, Notebook,
                               DockItem)
from enaml.core.api import Conditional

from hqc_meas.utils.widgets.qt_tree_widget import QtTreeWidget
from hqc_meas.utils.widgets.tree_nodes import TreeNode
from hqc_meas.utils.widgets.qt_tree_menu import \
    (CopyAction, CutAction, PasteAction, NewAction, RenameAction, DeleteAction)

from hqc_meas.tasks.api import (BaseTask, SimpleTask, ComplexTask)
from .editors.base_editor import BaseEditor
from .workspace import MeasureSpace


enamldef SaveAction(Action):

    text = 'Save template'
    attr action_context
    triggered ::
        widget, node, obj, nid = action_context['data']
        # TODO use core
#        save_task(obj, mode='template')


enamldef SimpleMenu(Menu): menu:
    """ Menu for simple tasks.

    """
    attr context

    NewAction:
        action_context << context
        factory = build_task
        mode = 'Add before'
        kwargs = {'parent_ui': menu}
    NewAction:
        action_context << context
        factory = build_task
        mode = 'Add after'
        kwargs = {'parent_ui': menu}
    Action:
        separator = True
    CutAction:
        action_context << context
    CopyAction:
        action_context << context
    PasteAction:
        action_context << context
    Action:
        separator = True
    DeleteAction:
        action_context << context
    Action:
        separator = True
    RenameAction:
        action_context << context


enamldef ComplexMenu(Menu): menu:
    """ Menu for complex tasks.

    """
    attr context
    attr workspace

    NewAction:
        action_context << context
        factory = build_task
        kwargs = {'parent_ui': menu}
    Action:
        separator = True
#    SaveAction:
#        action_context << context
    Action:
        separator = True
    CutAction:
        action_context << context
    CopyAction:
        action_context << context
    PasteAction:
        action_context << context
    Action:
        separator = True
    DeleteAction:
        action_context << context
    Action:
        separator = True
    RenameAction:
        action_context << context


class _MeasEditionModel(Atom):
    """
    """
    # Instance of the workspace
    workspace = Typed(MeasureSpace)

    # Currently selected task.
    selected_task = Instance(BaseTask)

    # List of all editors which can be used given the selected_task
    valid_editors = Dict(Unicode(), Instance(BaseEditor))

    def _observe_selected_task(self, change):
        """
        """
        editors = self.workspace.plugin.editors
        new_task = change['value']
        valid_editor_ids = []
        for id, editor in editors.iteritems():
            if editor.test(self.workspace, new_task):
                valid_editor_ids.append(id)

        if sorted(valid_editors.keys()) != sorted(valid_editor_ids):
            self.valid_editors = {id, editors[id].factory(workspace.workbench)
                                  for id in valid_editor_ids}


enamldef MeasEditionView(GroupBox):
    """ Main view for measurement edition

    """
    title = 'Measure'

    attr workspace
    attr selected_task << workspace.plugin.edited_measure.root_task
    selected_task >> _internal.selected_task

    attr _internal = _MeasEditionModel(workspace=workspace)

    constraints << [vbox(
                        hbox(lab, name, edition),
                        hbox(tree, task_view)
                        ),
                    align('v_center', lab, name)]

    Label: lab:
        text = 'Name'
    Field: name:
        hug_width = 'ignore'
        text := meas.monitor.measure_name
    PushButton: edition:
        text = 'Edit'
        tool_tip = 'Edit monitors, headers, and checks linked to the measure.'
        clicked ::
            #TODO implement
            pass

    QtTreeWidget: tree:
        hug_height = 'ignore'
        root_node << meas.root_task
        selected >> selected_task
        nodes = [TreeNode(
                    node_for  = [ComplexTask],
                    auto_open = True,
                    children  = 'children_task',
                    label     = 'task_label',
                    add = [BaseTask],
                    menu = ComplexMenu(workspace=workspace)),
                TreeNode(
                    node_for  = [SimpleTask],
                    auto_open = True,
                    children  = '',
                    label     = 'task_label',
                    menu      =  SimpleMenu()),
                    ]

    Notebook: editors:
        Include:
            objects << _internal.valid_editors.values()


enamldef MeasEditorDialog(Dialog): widget:
    alias meas : view.meas
    attr handler = EditorHandler()
    always_on_top = True
    Container:
        constraints = [vbox(view, hbox(save, save_template, spacer))]
        MeasView: view:
            meas << widget.meas
        PushButton: save:
            text = 'Save'
            hug_width  = 'strong'
            hug_height = 'strong'
            clicked ::
                handler.save_clicked(widget)
        PushButton: save_template:
            text = 'Save as template'
            hug_width  = 'strong'
            hug_height = 'strong'
            clicked ::
                handler.save_template_clicked(widget)
