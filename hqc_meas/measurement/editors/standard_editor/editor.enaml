# -*- coding: utf-8 -*-
#==============================================================================
# module : base_editor.py
# author : Matthieu Dartiailh
# license : MIT license
#==============================================================================
from atom.api import Atom, Dict, Str, Value, Instance, Typed, Callable
from enaml.workbench.api import Workbench
from enaml.workbench.core.core_plugin import CorePlugin
from enaml.widgets.api import Html, Container, GroupBox
from enaml.core.api import Include
from inspect import cleandoc

from hqc_meas.tasks.api import BaseTask
from ..base_editor import BaseEditor


enamldef FailureView(GroupBox):
    """ View displayed when a view, matching the selected task, was not found.

    """
    attr task

    Html:
        source = cleandoc('''No matching view was found for the selected
                           task.''')


class _StandardEditorModel(Atom):
    """ Model for the standard editor.

    The model is responsible for fetching the right view for the selected task,
    and caching values for the views.

    """
    #--- Public API -----------------------------------------------------------

    # Reference to the workbench.
    workbench = Typed(Workbench)

    # Cache in which task views can store infos. This useful for UI only infos
    # which can be lost when the user browse through task.
    cache = Dict(Str())

    # Currently selected task for the editor.
    selected_task = Instance(BaseTask)

    # Currently displayed view.
    current_view = Value()


    #--- Private API ----------------------------------------------------------

    # Cache in which task view are stored for quicker second access.
    _views_def_cache = Dict()

    # Reference to the invoke_command method of the core plugin.
    _core = Typed(CorePlugin)

    def _observe_selected_task(self, change):
        """ Observer getting the correct view for the selected task.

        """
        t_class = type(change['value']).__name__
        cmd = u'hqc_meas.task_manager.views_request'
        invoke = self._core.invoke_command
        views, missing = invoke(cmd, {'task_classes': [t_class]}, self)
        if missing:
            self.current_view = FailureView()
        else:
            view = views[t_class]
            kwargs = {'task': change['value']}
            if hasattr(view, 'core'):
                kwargs['core'] = self._core
            if hasattr(view, 'cache'):
                kwargs['cache'] = self.cache
            self.current_view = views[t_class](**kwargs)

    def _default__core(self):
        """ Default value for the _invoker member.

        """
        core = self.workbench.get_plugin(u'enaml.workbench.core')
        return core


enamldef StandardEditor(BaseEditor):
    """ Standard editor displaying the selected task using the task view.

    """
    attr workbench
    attr _internal = _StandardEditorModel(workbench=workbench)

    name = 'standard_editor'
    selected_task >> _internal.selected_task

    Container:
        Include:
            objects << _internal.current_view
