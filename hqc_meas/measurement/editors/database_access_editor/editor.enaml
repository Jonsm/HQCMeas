# -*- coding: utf-8 -*-
#==============================================================================
# module : editor.enaml
# author : Matthieu Dartiailh
# license : MIT license
#==============================================================================
from atom.api import Atom, ContainerList, Value, Str, Tuple
from enaml.workbench.api import Workbench
from enaml.widgets.api import (Container, GroupBox, CheckBox, ScrollArea,
                               Label, FlowArea, FlowItem, Label)
from enaml.core.api import Looper, Conditional
from enaml.stdlib.mapped_view import MappedView
from inspect import cleandoc

from hqc_meas.tasks.api import ComplexTask
from ..base_editor import BaseEditor


class _Model(Atom):
    """

    """
    task = Value()

    entries = ContainerList()

    children_entries = ContainerList()

    complexs = ContainerList()

    def __init__(self, task):
        if task:
            self.entries = [(task.task_name + '_' + e, task.task_name, e)
                            for e in task.task_database_entries]
            for child in task._gather_children_task():
                if isinstance(child, ComplexTask):
                    self.entries.extend(child.access_exs)
                    model = _Model(child)
                    self.children_entries.extend(model.entries)
                    self.complexs.append((model, child))
                else:
                    c_entries = [(child.task_name + '_' + e, child.task_name, e)
                                 for e in child.task_database_entries]
                    self.children_entries.extend(c_entries)

            if task.task_depth == 0:
                self.children_entries = self.entries + self.children_entries


enamldef TaskAccessEditor(GroupBox):

    attr task
    attr _model
    attr _map

    title = task.task_name

    FlowArea:
        Looper:
            iterable << _model.children_entries
            FlowItem:
                Container:
                    CheckBox:
                        text = loop_item[0]
                        checked = loop_item[0] in task.access_exs
                        checked ::
                            if change['value']:
                                task.add_access_exception(loop_item[0])
                            else:
                                task.remove_access_exception(loop_item[0])

    Looper:
        iterable << _model.complexs
        MappedView:
            model = loop_item[0]
            typemap = _map
            kwargs = {'task': loop_item[1], '_map': _map}
            modelkey = '_model'


enamldef DatabaseAccessEditor(BaseEditor):
    """

    """
    attr task << selected_task
    attr _model << _Model(task)
    attr _map = {_Model : TaskAccessEditor}

    title = 'Database access editor'
    name = 'database_access_editor'

    GroupBox:
        padding = 2
        title << task.task_name if task else ''
        ScrollArea:
            Container:
                padding = 0
                FlowArea:
                    Looper:
                        iterable << _model.children_entries
                        FlowItem:
                            Conditional:
                                condition << task.task_depth == 0
                                Container:
                                    Label:
                                        text << loop_item[0]

                            Conditional:
                                condition << task.task_depth > 0
                                Container:
                                    CheckBox:
                                        text << loop_item[0]
                                        checked = loop_item[0] in task.access_exs
                                        checked ::
                                            if change['value']:
                                                task.add_access_exception(loop_item[0])
                                            else:
                                                task.remove_access_exception(loop_item[0])

                Looper:
                    iterable << _model.complexs
                    MappedView:
                        model << loop_item[0]
                        typemap = _map
                        kwargs = {'task': loop_item[1], '_map': _map}
                        modelkey = '_model'
