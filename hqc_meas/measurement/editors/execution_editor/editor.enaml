# -*- coding: utf-8 -*-
#==============================================================================
# module : editor.enaml
# author : Matthieu Dartiailh
# license : MIT license
#==============================================================================
from atom.api import Atom, ContainerList, Value, Str, Tuple, List
from enaml.workbench.api import Workbench
from enaml.widgets.api import (Container, GroupBox, CheckBox, ScrollArea,
                               Label, CheckBox, Label)
from enaml.core.api import Looper, Conditional
from enaml.stdlib.mapped_view import MappedView
from inspect import cleandoc

from hqc_meas.tasks.api import ComplexTask
from ..base_editor import BaseEditor


class _Model(Atom):
    """

    """
    task = Value()

    entries = List()

    children_entries = List()

    complexs = ContainerList()

    def bind_observers(self):
        """

        """
        if not self.task:
            return

        self.task.observe('task_database_entries', self._task_observer)
        self.task.observe('access_exs', self._task_observer)
        # XXXX this assumes that children task is the only container.
        self.task.observe('children_task', self._children_observer)
        for child in self.task._gather_children_task():
            child.observe('task_database_entries',
                          self._database_entries_observer)

    def unbind_observers(self, task=None):
        """

        """
        if not task:
            if not self.task:
                return
            task = self.task

        task.unobserve('task_database_entries', self._task_observer)
        task.unobserve('access_exs', self._task_observer)
        # XXXX this assumes that children task is the only container.
        task.unobserve('children_task', self._children_observer)
        for child in task._gather_children_task():
            child.unobserve('task_database_entries',
                            self._database_entries_observer)

    def build_entries(self):
        """

        """
        task = self.task
        entries = [task.task_name + '_' + e
                       for e in task.task_database_entries]
        children_entries = []
        complexs = []
        for child in task._gather_children_task():
            if isinstance(child, ComplexTask):
                entries.extend(child.access_exs)
                model = _Model(task=child)
                model.observe('entries', self._model_entries_observer)
                children_entries.extend(model.entries)
                complexs.append((model, child))
            else:
                c_entries = [child.task_name + '_' + e
                             for e in child.task_database_entries]
                children_entries.extend(c_entries)

        if task.task_depth == 0:
            self.children_entries = entries + children_entries
        else:
            self.children_entries = children_entries

        self.entries = entries
        self.complexs = complexs

    #--- Private API ----------------------------------------------------------

    def _observe_task(self, change):
        """

        """
        if 'oldvalue' in change and change['oldvalue']:
            self.unbind_observers(change['oldvalue'])

        task = change['value']
        if task:
            self.build_entries()
            self.bind_observers()

    def _task_observer(self, change):
        """

        """
        entries = self.entries[:]

        if change['name'] == 'task_database_entries':
            new = change['value'].viewkeys()
            old = change.get('oldvalue',{}).viewkeys()
            added = new - old
            removed = old - new

            for entry in removed:
                entries.remove(task.task_name + '_' + entry)
            for entry in added:
                entries.append(task.task_name + '_' + entry)

        else:
            if change['type'] != 'container':
                new = set(change['value'])
                old = set(change.get('oldvalue',[]))
                added = new - old
                removed = old - new

                for entry in removed:
                    entries.remove(task.task_name + '_' + entry)
                for entry in added:
                    entries.append(task.task_name + '_' + entry)

            else:
                op = change['operation']
                if op in ('__iadd__', 'append', 'extend', 'insert'):
                    if 'item' in change:
                        entries.append(change['item'])
                    if 'items' in change:
                        entries.extend(change['items'])

                elif op in ('__delitem__', 'remove', 'pop'):
                    if 'item' in change:
                        entries.remove(change['item'])
                    if 'items' in change:
                        for e in change['items']:
                            entries.remove(e)

        self.entries = entries

    def _children_observer(self, change):
        """

        """
        added = set(change['value']) - set(change.get('oldvalue', []))
        removed = set(change.get('oldvalue', [])) - set(change['value'])

        complexs = self.complexs[:]
        entries = self.entries[:]
        c_entries = self.children_entries[:]

        for child in removed:
            if isinstance(child, ComplexTask):
                child.unobserve('access_ex', self._exceptions_observer)
                # XXXX this assumes that children task is the only container.
                child.unobserve('children_task', self._children_observer)

                for d in complexs:
                    if d[1] is child:
                        d[0].unbind_observers()
                        complexs.remove(d)
                        break

                for ex in child.access_exs:
                    entries.remove(child.task_name + '_' + ex)
                    if self.task.task_depth == 0:
                        c_entries.remove(child.task_name + '_' + ex)

            child.unobserve('task_database_entries',
                            self._database_entries_observer)
            for entry in child.task_database_entries.keys():
                c_entries.remove(child.task_name + '_' + entry)

        for child in added:
            if isinstance(child, ComplexTask):

                model = _Model(task=child)
                model.observe('entries', self._model_entries_observer)
                complexs.append((model, child))

                for ex in child.access_exs:
                    entries.append(child.task_name + '_' + ex)
                    if self.task.task_depth == 0:
                        c_entries.append(child.task_name + '_' + ex)

            child.observe('task_database_entries',
                          self._database_entries_observer)
            for entry in child.task_database_entries.keys():
                c_entries.append(child.task_name + '_' + entry)

        self.complexs = complexs
        self.entries = entries
        self.children_entries = c_entries


enamldef _SimpleExEditor(GroupBox):

    attr task
    attr _model
    attr _lock : bool = False

    title = task.task_name

    CheckBox: stop:
        text = 'Stoppable'
        checked := task.stoppable
        tool_tip = cleandoc('''Can the program be stopped or paused at this
                            task. Disabling allow to skip some check and might
                            be beneficial in very tight loops.''')

    CheckBox: parallel:
        text = 'Parallel'
        tool_tip = cleandoc('''Should this task perform its job in parallel
                            (new thread).''')
        checked << bool(task.parallel.get('activated'))
        checked ::
            if not _lock:
                _lock = True
                aux = task.parallel.copy()
                aux['activated'] = change['value']

                # Avoid rebuilding twice perform_
                with task.suppress_notifications():
                    task.wait['activated'] = False

                task.parallel = aux

                if change['value']:
                    wait.checked = False

                _lock = False

    CheckBox: wait:
        text = 'Wait'
        tool_tip = cleandoc('''Should this task wait for any other task
                            currently working in parallel.''')
        checked << bool(task.wait.get('activated'))
        checked ::
            if not _lock:
                _lock = True
                aux = task.wait.copy()
                aux['activated'] = change['value']

                # Avoid rebuilding twice perform_
                with task.suppress_notifications():
                    task.parallel['activated'] = False

                task.wait = aux

                if change['value']:
                    parallel.checked = False

                _lock = False

    Conditional:
        condition << parallel.checked
        # TODO

    Conditional:
        condtion << wait.checked
        # TODO

enamldef _ComplexExEditor(GroupBox):

    attr task
    attr _model
    attr _map

    title = task.task_name if task else ''

    FlowArea:
        hug_height = 'medium'
        Looper:
            iterable << _model.children_entries
            FlowItem:
                Container:
                    padding = 0
                    Conditional:
                        condition << task.task_depth == 0 if task else False
                        Container:
                            padding = 0
                            Label:
                                text << loop_item

                    Conditional:
                        condition << task.task_depth > 0 if task else True
                        Container:
                            padding = 0
                            CheckBox:
                                text << loop_item
                                checked = loop_item in task.access_exs\
                                    if task else False
                                checked ::
                                    if change['value']:
                                        task.add_access_exception(loop_item)
                                    else:
                                        task.remove_access_exception(loop_item)

    Looper:
        iterable << _model.complexs
        MappedView:
            model = loop_item[0]
            typemap = _map
            kwargs = {'task': loop_item[1], '_map': _map}
            modelkey = '_model'


enamldef ExecutionEditor(BaseEditor): editor:
    """

    """
    attr model = _Model(task=selected_task)
    attr _map = {_Model : _AccessEditor}

    title = 'Execution editor'
    name = 'execution_editor'

    selected_task >> model.task

    selected ::
        model.bind_observers()

    unselected ::
        model.unbind_observers()

    Container:
        ScrollArea: scroll:
            _AccessEditor:
                task << selected_task
                _model << model
                _map = editor._map
