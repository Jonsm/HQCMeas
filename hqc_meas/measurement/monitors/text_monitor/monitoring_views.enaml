# -*- coding: utf-8 -*-
#==============================================================================
# module : monitoring_views.enaml
# author : Matthieu Dartiailh
# license : MIT license
#==============================================================================
"""
"""
from enaml.core.api import Looper, Conditional
from enaml.layout.api import hbox, spacer, vbox
from enaml.widgets.api import (PushButton, Menu, Action, Container, Window,
                               CheckBox, ObjectCombo, Dialog,
                               Label, Form, Field, GroupBox)
from enaml.stdlib.message_box import question

from operator import attrgetter
from inspect import cleandoc

from ..utils.widgets.qt_list_str_widget import QtListStrWidget
from ..utils.widgets.qt_line_completer import QtLineCompleter
from ..utils.widgets.list_editor import ListEditor
from .monitoring_entries import (MonitoredEntry, EntryBuilder, Entry)
from .monitoring_rules_view import EditRulesView

# TODO check that everything fit inthe new system. (mainly edition of rules)
enamldef EditMonitorView(Dialog): dial:
    """
    """
    attr monitor
    attr selected

    title = 'Select the monitored entries'

    Container:
        constraints << [vbox(
                            hbox(
                                vbox(undisp_lab, undisp),
                                vbox(disp_all, disp_one,
                                     hide_one, hide_all, spacer),
                                vbox(disp_lab, disp),
                                vbox(edit_rules, manual_entries,
                                     hbox(*cond.items), show_hidden),
                                ),
                            hbox(spacer, close),
                            ),
                        disp_all.width == disp_one.width,
                        disp_one.width == hide_one.width,
                        hide_one.width == hide_all.width]

        # Undisplayed entries.
        Label: undisp_lab:
            text = 'Undisplayed entries'
        QtListStrWidget: undisp:
            items << [e.name for e in sorted(monitor.undisplayed_entries,
                                             key=attrgetter('path'))]
            selected_item ::
                selected = selected_item
                disp.clear_selection()

        # Displayed entries.
        Label: disp_lab:
            text = 'Displayed entries'
        QtListStrWidget: disp:
            items << [e.name for e in sorted(monitor.displayed_entries,
                                             key=attrgetter('path'))]
            selected_item ::
                selected = selected_item
                undisp.clear_selection()

        # Main buttons for changing displayed/undisplayed.
        PushButton: disp_all:
            text = '>>'
            hug_width = 'strong'
            clicked ::
                monitor.displayed_entries += monitor.undisplayed_entries
                monitor.undisplayed_entries = []
                disp.refresh_items()
        PushButton: disp_one:
            text = '>'
            hug_width = 'strong'
            clicked ::
                e = [e for e in monitor.undisplayed_entries
                        if e.name == undisp.selected_item]
                if e:
                    monitor.displayed_entries += e
                    monitor.undisplayed_entries.remove(e[0])
                    disp.refresh_items()
        PushButton: hide_all:
            text = '<<'
            hug_width = 'strong'
            clicked ::
                monitor.undisplayed_entries += monitor.displayed_entries
                monitor.displayed_entries = []
                undisp.refresh_items()
        PushButton: hide_one:
            text = '<'
            hug_width = 'strong'
            clicked ::
                e = [e for e in monitor.displayed_entries
                        if e.name == disp.selected_item]
                if e:
                    monitor.undisplayed_entries.append(e[0])
                    monitor.displayed_entries.remove(e[0])
                    undisp.refresh_items()
        CheckBox: show_hidden:
            text = 'Show hidden entries'
            checked ::
                if show_hidden.checked:
                    monitor.undisplayed_entries += monitor.hidden_entries
                    undisp.refresh_items()
                else:
                    monitor.undisplayed_entries[:] =\
                        [e for e in monitor.undisplayed_entries
                            if e not in monitor.hidden_entries]:

        # Special edition buttons.
        PushButton: edit_rules:
            text = 'Edit rules'
            clicked ::
                d = EditRulesView(parent = dial, monitor = monitor)
                d.exec_()
                if d.edition_performed:
                    monitor.save_rules()
                    monitor.refresh_monitored_entries()
        PushButton: manual_entries:
            text = 'Add entry'
            clicked ::
                ent = EntryDialog(parent = dial, monitor = monitor)
                if ent.exec_():
                    monitor.custom_entries.append(ent.new_entry)
                    monitor.displayed_entries.append(ent.new_entry)
        Conditional: cond:
            condition << selected in monitor.custom_entries
            PushButton:
                text = 'Edit entry'
                clicked ::
                    EntryDialog(parent = dial, monitor = monitor,
                                new_entry = selected).exec_()
            PushButton:
                text = 'Delete entry'
                clicked::
                    q = question(dial, 'Confirm deletion',
                                cleandoc('''Are you sure tou want to delete the
                                     entry {}'''.format(selected.name)))
                    if q.action == 'accept':
                        if selected in monitor.displayed_entries:
                            monitor.displayed_entries.remove(selected)
                        else:
                            monitor.undisplayed_entries.remove(selected)
                        monitor.custom_entries.remove(selected)

        # Quit button.
        PushButton: close:
            text = 'Close'
            clicked ::
                dial.accept()


enamldef MonitorView(Window):
    """
    """
    attr monitor

    destroy_on_close = False
    title = 'Text monitor'

    Container:
        constraints << [vbox(name, hbox(sta_lab, sta, spacer), form)]
        Label: name:
            font = 'bold 12pt'
            text << monitor.measure_name.capitalize()
        Label: sta_lab:
            text = 'Status : '
        Label: sta:
            text << monitor.status
        Form: form:
            Looper:
                iterable << sorted(monitor.displayed_entries,
                                   key=attrgetter('path'))
                Label:
                    hug_width = 'strong'
                    text << loop_item.name
                Field:
                    read_only = True
                    text << loop_item.value
