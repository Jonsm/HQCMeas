# -*- coding: utf-8 -*-
#==============================================================================
# module : custom_entry_building.enaml
# author : Matthieu Dartiailh
# license : MIT license
#==============================================================================
from atom.api import (Atom, Str, List, ContainerList, Dict, Instance)
from collections import Counter


class _Entry(Atom):
    """ Simple place holder class.

    """
    entry = Str()
    entries = List(Str())


# TODO clean up when the role of it is clearer.
class EntryBuilder(Atom):
    """Model for entry creation dialog

    Get all database entries from monitor, and build the easiest to read
    possible list of entries mapping them to full database paths.
    """
    # Mapping between user readable names and full names of database entries.
    map_entries = Dict(Str(), Str())

    # List
    used_entries = ContainerList(Instance(_Entry))
    formatted_entries = List(Str())

    def __init__(self, monitor, new_entry=None):

        entries = monitor.all_database_entries
        short_entries = [entry.rsplit('/', 1)[1] for entry in entries]
        depth = 2

        while self._remove_duplicates(entries, short_entries, depth):
            depth += 1

        self.map_entries = {short_entries[i]: entries[i]
                            for i in xrange(len(entries))}
        if new_entry:
            aux = self.map_entries.iteritems()
            entries = self.map_entries.keys()
            self.used_entries = [_Entry(entry=key, entries=entries)
                                 for key, val in aux
                                 if val in new_entry.depend_on]

    def format_(self, format_str):
        """
        """
        repl = ['{'+e+'}' for e in self.formatted_entries]
        return format_str.format(repl)

    def get_used_names(self):
        """
        """
        return [e.entry for e in self.used_entries]

    def _observe_used_entries(self, change):
        """
        """
        mapping = self.map_entries
        used = change['value']
        self.formatted_entries = [mapping[e.entry] for e in used
                                  if e.entry in mapping]

    @staticmethod
    def _remove_duplicates(entries, short_entries, depth):
        """ Create the easiest to read database entries names with no doublons.

        """
        duplicate = [e for e, count in Counter(short_entries).items()
                     if count > 1]
        if not duplicate:
            return False

        for entry in duplicate:
            indexes = [i for i, x in enumerate(short_entries) if x == entry]
            for i in indexes:
                short_entries[i] = '/'.join(entries[i].split('/')[-depth:-1])

        return True

enamldef EntrySelection(ObjectCombo):
    attr model
    items = model.entries
    selected := model.entry

enamldef EntryDialog(Dialog): dial:
    attr monitor
    attr new_entry
    attr builder = EntryBuilder(monitor, new_entry)
    title = 'Build your entry'
    Container:
        constraints << [vbox(hbox(name_lab, name), entries, list,
                            hbox(for_lab, formating),
                            hbox(spacer,cancel, ok))]
        Label: name_lab:
            text = 'Name'
        Field: name:
            hug_width = 'medium'
        Label: entries:
            text = 'Entries'
        ListEditor(EntrySelection): list:
            list.model << builder
            list.iterable_name = 'used_entries'
            list.factory = Entry
            list.kwargs = {'entries' : builder.map_entries.keys()}
        Label:for_lab:
            text = 'Formatting'
        QtLineCompleter: formating:
            entries_updater = builder.get_used_names
        PushButton: ok:
            text = 'Ok'
            clicked::
                if not dial.new_entry:
                    dial.new_entry = MonitoredEntry(name = name.text,
                            path = name.text,
                            formatting = builder.format_(formating.text),
                            depend_on = entries_holder.formatted_entries,
                            )
                dial.accept()
        PushButton: cancel:
                text = 'Cancel'
                clicked::
                    dial.reject()