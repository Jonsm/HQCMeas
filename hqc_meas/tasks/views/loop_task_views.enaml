from enaml.stdlib.mapped_view import MappedView
from enaml.layout.api import hbox, align, spacer, vbox, grid
from enaml.widgets.api import (PushButton, Container, Label, Field, FileDialog,
                                GroupBox, CheckBox)

from hqc_meas.enaml_util.qt_line_completer import QtLineCompleter
from .task_editor import (TaskEditor)
from hqc_meas.task_management.task_building import build_task

enamldef SimpleLoopView(GroupBox): view:
    attr task
    alias mapping : editor.mapping
    title << task.task_name
    constraints = [grid(
                    [lab_start, lab_stop, lab_step, timing],
                    [val_start, val_stop, val_step, timing_bool],
                    [editor, editor, editor, editor]),
                    val_start.width == val_stop.width,
                    val_stop.width == val_step.width,
                ]
    Label: lab_start:
        text = 'Start'
    QtLineCompleter: val_start:
        text := task.task_start
        entries_updater << task._list_database_entries
    Label: lab_stop:
        text = 'Stop'
    QtLineCompleter: val_stop:
        text := task.task_stop
        entries_updater << task._list_database_entries
    Label: lab_step:
        text = 'Step'
    QtLineCompleter: val_step:
        text := task.task_step
        entries_updater << task._list_database_entries
    Label: timing:
        text = 'Timing'
    CheckBox: timing_bool:
        checked := task.timing
    TaskEditor: editor:
        task := view.task
        factory = build_task

enamldef LoopView(GroupBox): view:
    attr task
    alias mapping : editor.mapping
    title << task.task_name
    constraints << [vbox(grid(
                    [lab_start, lab_stop, lab_step, timing],
                    [val_start, val_stop, val_step, timing_bool]),
                    hbox(cont, spacer), editor),
                    val_start.width == val_stop.width,
                    val_stop.width == val_step.width,
                ]
    Label: lab_start:
        text = 'Start'
    QtLineCompleter: val_start:
        text := task.task_start
        entries_updater << task._list_database_entries
    Label: lab_stop:
        text = 'Stop'
    QtLineCompleter: val_stop:
        text := task.task_stop
        entries_updater << task._list_database_entries
    Label: lab_step:
        text = 'Step'
    QtLineCompleter: val_step:
        text := task.task_step
        entries_updater << task._list_database_entries
    Label: timing:
        text = 'Timing'
    CheckBox: timing_bool:
        checked := task.timing
    Container: cont:
        padding = (0,0,0,0)
        hug_width = 'strong'
        hug_height = 'strong'
        MappedView:
            model << task.task
            typemap = mapping
            modelkey = 'task'
            kwargs = {'mapping' : mapping, 'in_loop' : True}
    TaskEditor: editor:
        task := view.task
        factory = build_task