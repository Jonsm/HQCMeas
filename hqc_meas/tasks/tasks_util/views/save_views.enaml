from enaml.layout.api import hbox, align, spacer, vbox, grid
from enaml.widgets.api import (PushButton, Container, Label, Field, FileDialog,
                                GroupBox, ObjectCombo, Dialog, MultilineField,
                                Form)

from hqc_meas.tasks.tools.pair_editor import PairEditor
from hqc_meas.tasks.tools.string_evaluation import (EVALUATER_TOOLTIP,
                                                    FORMATTER_TOOLTIP)
from hqc_meas.utils.widgets.qt_line_completer import QtLineCompleter


enamldef HeaderDialog(Dialog): dial:

    attr model
    alias header : field.text
    title = 'Header'

    Container:
        constraints = [vbox(field,
                            hbox(default, spacer, cancel, ok))]

        MultilineField: field:
            hug_height = 'weak'
        PushButton: default:
            text = 'Default header'
            clicked ::
                database = model.task_database
                entries = database.list_accessible_entries(model.task_path)
                if 'default_header' in entries:
                    field.text = model.get_from_database('default_header')
                else:
                    field.text = ''
        PushButton: cancel:
            text = 'Cancel'
            clicked ::
                dial.reject()
        PushButton: ok:
            text = 'Ok'
            clicked ::
                dial.accept()


enamldef SavedValueView(Form):
    attr model
    padding = (0,0,0,0)
    Field:
        hug_width = 'strong'
        text := model.label
    QtLineCompleter:
        text := model.value
        entries_updater = model.task.accessible_database_entries
        tool_tip = EVALUATER_TOOLTIP


enamldef SaveView(GroupBox):
    attr task
    attr mapping
    title << task.task_name
    constraints = [vbox(
                    grid([mode_lab, points_lab],
                        [mode_val, points_val]),
                    file_cont, ed)]
    Label: mode_lab:
        text = 'Save to'
    ObjectCombo: mode_val:
        items = list(task.get_member('saving_target').items)
        selected := task.saving_target
    Label: points_lab:
        text = 'Points number'
    QtLineCompleter: points_val:
        text := task.array_size
        entries_updater << task.accessible_database_entries
    Container: file_cont:
        hug_height = 'strong'
        enabled << bool(task.saving_target != 'Array')
        GroupBox: folder:
            title = 'Directory'
            constraints = [hbox(path, explore),
                            align('v_center', path, explore)]
            QtLineCompleter: path:
                text := task.folder
                entries_updater << task.accessible_database_entries
                tool_tip = FORMATTER_TOOLTIP
            PushButton: explore:
                text = 'E'
                hug_width = 'strong'
                clicked ::
                    path = FileDialog(mode = 'directory',
                                    title = 'Select a default path',
                                    ).exec_()
                    if path:
                        task.folder = path
        GroupBox: file:
            title = 'File'
            constraints = [hbox(name, header),
                            align('v_center', name, header)]
            QtLineCompleter: name:
                text := task.filename
                entries_updater << task.accessible_database_entries
                tool_tip = FORMATTER_TOOLTIP
            PushButton: header:
                text = 'Header'
                hug_width = 'strong'
                clicked ::
                    dial = HeaderDialog(header = task.header, model = task)
                    if dial.exec_():
                        task.header = dial.header

    PairEditor(SavedValueView): ed:
        ed.title = 'Label : Value'
        ed.model << task
        ed.iterable_name = 'saved_values'


enamldef SaveArrayView(GroupBox):
    attr task
    attr mapping
    title << task.task_name
    constraints = [vbox(folder, file,
                        grid([mode_lab, arr_lab],
                             [mode_val, arr_val]))]
    GroupBox: folder:
        title = 'Folder'
        hug_height = 'strong'
        constraints = [hbox(path, explore),
                        align('v_center', path, explore)]
        QtLineCompleter: path:
            text := task.folder
            entries_updater << task.accessible_database_entries
            tool_tip = FORMATTER_TOOLTIP
        PushButton: explore:
            text = 'E'
            hug_width = 'strong'
            clicked ::
                path = FileDialog(mode = 'directory',
                                title = 'Select a default path',
                                ).exec_()
                if path:
                    task.folder = path
    GroupBox: file:
        title = 'File'
        hug_height = 'strong'
        constraints = [hbox(name, header),
                        align('v_center', name, header)]
        QtLineCompleter: name:
            text := task.filename
            entries_updater << task.accessible_database_entries
            tool_tip = FORMATTER_TOOLTIP
        PushButton: header:
            text = 'Header'
            hug_width = 'strong'
            clicked ::
                dial = HeaderDialog(header = task.header, model = task)
                if dial.exec_():
                    task.header = dial.header
    Label: mode_lab:
        text = 'Mode'
    ObjectCombo: mode_val:
        items = list(task.get_member('mode').items)
        selected := task.mode
    Label: arr_lab:
        text = 'Target array'
    QtLineCompleter: arr_val:
        hug_width = 'ignore'
        text := task.target_array
        entries_updater << task.accessible_database_entries
        tool_tip = EVALUATER_TOOLTIP

TASK_VIEW_MAPPING = {'SaveTask' : SaveView,
                     'SaveArrayTask' : SaveArrayView}
