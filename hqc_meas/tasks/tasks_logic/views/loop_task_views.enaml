from enaml.core.api import Include
from enaml.layout.api import hbox, align, spacer, vbox, grid
from enaml.widgets.api import (PushButton, Container, Label, Field, FileDialog,
                                GroupBox, CheckBox)

from hqc_meas.utils.widgets.qt_line_completer import QtLineCompleter
from hqc_meas.tasks.tools.task_editor import (TaskEditor, TaskViewManager)

enamldef SimpleLoopView(GroupBox): view:
    attr task
    alias core : editor.core
    title << task.task_name
    constraints = [grid(
                    [lab_start, lab_stop, lab_step, timing],
                    [val_start, val_stop, val_step, timing_bool],
                    [editor, editor, editor, editor]),
                    val_start.width == val_stop.width,
                    val_stop.width == val_step.width,
                ]
    Label: lab_start:
        text = 'Start'
    QtLineCompleter: val_start:
        text := task.task_start
        entries_updater << task._list_database_entries
    Label: lab_stop:
        text = 'Stop'
    QtLineCompleter: val_stop:
        text := task.task_stop
        entries_updater << task._list_database_entries
    Label: lab_step:
        text = 'Step'
    QtLineCompleter: val_step:
        text := task.task_step
        entries_updater << task._list_database_entries
    Label: timing:
        text = 'Timing'
    CheckBox: timing_bool:
        checked := task.timing
    TaskEditor: editor:
        task := view.task

enamldef LoopView(GroupBox): view:

    attr task
    alias cache : editor.cache
    alias core : editor.core
    attr _model = TaskViewManager([task.task], core=core)

    title << task.task_name
    constraints << [vbox(grid(
                    [lab_start, lab_stop, lab_step, timing],
                    [val_start, val_stop, val_step, timing_bool]),
                    hbox(*incl.objects), editor),
                    val_start.width == val_stop.width,
                    val_stop.width == val_step.width,
                ]

    Label: lab_start:
        text = 'Start'
    QtLineCompleter: val_start:
        text := task.task_start
        entries_updater << task._list_database_entries

    Label: lab_stop:
        text = 'Stop'
    QtLineCompleter: val_stop:
        text := task.task_stop
        entries_updater << task._list_database_entries

    Label: lab_step:
        text = 'Step'
    QtLineCompleter: val_step:
        text := task.task_step
        entries_updater << task._list_database_entries

    Label: timing:
        text = 'Timing'
    CheckBox: timing_bool:
        checked := task.timing

    Include: incl:
        objects << [_model.instantiate_view(task.task, {'core': core,
                                                        'in_loop': True})]

    TaskEditor: editor:
        task := view.task

TASK_VIEW_MAPPING = {'SimpleLoopTask': SimpleLoopView,
                     'LoopTask': LoopView}
