# -*- coding: utf-8 -*-
#==============================================================================
# module : task_editor.enaml
# author : Matthieu Dartiailh
# license : MIT license
#==============================================================================
"""
"""
from enaml.core.api import Looper, Conditional, Include
from enaml.layout.api import vbox, spacer, hbox, align
from enaml.widgets.api import (PushButton, Menu, Action, Container, Stack,
                               StackItem, Label, GroupBox, Form)
from enaml.stdlib.mapped_view import MappedView

from hqc_meas.utils.widgets.list_editor import PopupListMenu


def _views_helper(core, tasks):
    """ A helper function for the _TaskView component.

    This helper instantiates the view for the given task of
    a _TaskView component.

    """
    t_classes = [type(task) for task in tasks]
    views = core.invoke_command('hqc_meas.task_manager.views_request',
                               parameters={'task_classes': [t_class]})
    return views


enamldef _TaskListView(Container): list_view:
    """ A base ustom container to edit the children of a task.

    """
    attr task
    attr core
    attr operations = ['add', 'remove', 'move']
    attr views_map << _views_helper(core, task.children_task[:])

    hug_height = 'strong'
    padding = 0

    Looper:
        iterable << task.children_task[:]
        Container:
            padding = 0
            constraints = [hbox(button, *view.objects),
                           align('top', button, *view.objects)]
            PushButton: button:
                constraints = [width == 15,
                                height == 20]
                font = 'bold 12pt Consolas'
                text = '>'
                clicked ::
                    edited_list = task.children_task
                    menu = PopupListMenu(
                      model = edited_list,
                      index = edited_list.index(loop_item),
                      factory = core.invoke_commad,
                      operations = operations,
                      args = ('hqc_meas.task_manager.build_task',),
                      kwargs = {'parameters': {'parent_ui': button},
                                'trigger': button})
                    menu.popup()
            MappedView: view:
                model = loop_item
                typemap = views_map
                kwargs = {'core': core}
                modelkey = 'task'

enamldef TaskEditor(Container): view:
    """ A custom container to edit the children of a task. Support folding.

    """

    attr task
    attr core

    padding = 2
    Conditional:
        condition << not bool(task.children_task)
        PushButton:
            text = 'Add first element'
            clicked ::
                obj = factory(parent_ui = view)
                if obj:
                    task.children_task.append(obj)
    Conditional:
        condition << bool(task.children_task)
        Container: box:
            attr stack_index = 1
            constraints = [vbox(hbox(folding, foldable_content),spacer),
                           align('top', folding, foldable_content)]
            padding = (0,5,2,2)
            PushButton: folding:
                text = '-'
                constraints = [width == 15, height == 20]
                clicked ::
                    if folding.text == '-':
                        box.stack_index = 0
                        folding.text = '+'
                    else:
                       box.stack_index = 1
                       folding.text = '-'
            GroupBox: foldable_content:
                padding = (0,5,2,2)
                Stack:
                    size_hint_mode = 'current'
                    hug_width = 'ignore'
                    index << stack_index
                    StackItem:
                        Container:
                            hug_height = 'strong'
                            padding = 0
                            Label:
                                text = 'FOLDED ITEMS'
                    StackItem:
                        _TaskListView:
                            task = view.task
                            core = view.core

enamldef NonFoldingTaskEditor(Container): view:
    """ A custom container to edit the children of a task.

    """
    attr task
    attr core

    Conditional:
        condition << not bool(task.children_task)
        PushButton:
            text = 'Add first element'
            clicked ::
                obj = factory(parent_ui = view)
                if obj:
                    task.children_task.append(obj)
    Conditional:
        condition << bool(task.children_task)
        Container:
            _TaskListView:
                task = view.task
                core = view.core
